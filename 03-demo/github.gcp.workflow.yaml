name: CD

on: push

env:
  REGION: us-central1
  IMAGE_TAG: ${{ github.sha }}
  GCP_USERNAME: debian
  GCR_REPOSITORY: shopping-experience
  MICROSERVICE_NAME: shopping-experience

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-latest

    steps:
      # ----- SOURCE -----
      - name: Checkout repo
        uses: actions/checkout@v4

      # ----- GCP / GCR -----
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}

      # ----- BUILD & PUSH -----
      - name: Build and push Docker image
        run: |
          set -e
          IMAGE_URI="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Building image $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

  deploy:
    name: Deploy to GCE VM
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      # ----- COPY COMPOSE FILE -----
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Upload PROD docker compose to GCE VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ env.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          source: compose.prod.yml
          target: /opt/apps/${{ env.MICROSERVICE_NAME }}

      # ----- REMOTE DEPLOY -----
      - name: SSH & deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ env.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            set -e
            cd /opt/apps/${{ env.MICROSERVICE_NAME }}

            # Construct the same image URI as in the build job
            IMAGE_URI="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            echo "IMAGE_URI=$IMAGE_URI" > .env

            docker compose pull
            docker compose -f compose.prod.yml up -d --remove-orphans
